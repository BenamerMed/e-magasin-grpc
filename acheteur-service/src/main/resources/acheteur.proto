syntax = "proto3";
option java_package = "com.mba.acheteurservice.stubs";

service AcheteurService{
  //unary model
  rpc getAllAcheteur(GetAllAcheteurRequest) returns (GetAllAcheteurResponse);
  rpc getOneAcheteur(GetOneAcheteurRequest) returns (GetOneAcheteurResponse);
  rpc saveAcheteur(SaveAcheteurRequest) returns (SaveAcheteurResponse);
  rpc updateAcheteur(UpdateAcheteurRequest) returns (UpdateAcheteurResponse);
  rpc deleteAcheteur(DeleteAcheteurRequest) returns (DeleteAcheteurResponse);
  //server Streaming
  rpc getAllAcheteurStream(GetAllAcheteurStreamRequest) returns (stream Acheteur);
  // Client Streaming : Le client envoie un flux de requêtes pour sauvegarder plusieurs acheteurs
  rpc clientStreamAcheteur(stream AcheteurRequest) returns (SaveAcheteurResponseStream);

  // Bidirectionnel Streaming : Flux bidirectionnel pour sauvegarder les acheteurs un par un
  rpc bidirectionalStreamAcheteur(stream AcheteurRequest) returns (stream AcheteurResponse);

}
message SaveAcheteurResponseStream {
  repeated Acheteur acheteurs = 1;
  // Autres champs si nécessaires
}
message AcheteurResponse {
  Acheteur acheteur = 1;
  // ... autres champs si nécessaire
}

message GetAllAcheteurStreamRequest {}
message GetAllAcheteurRequest{}
message GetAllAcheteurResponse{
  repeated Acheteur acheteurs = 1;
}
message GetOneAcheteurRequest{
  int64 ida = 1;
}
message GetOneAcheteurResponse{
  Acheteur acheteur = 1;
}
message SaveAcheteurRequest{
  AcheteurRequest acheteurRequest = 1;
}
message SaveAcheteurResponse{
  Acheteur acheteur = 1;
}
message UpdateAcheteurRequest{
  int64 ida = 1;
  AcheteurRequest acheteurRequest = 2;
}
message UpdateAcheteurResponse{
  Acheteur acheteur = 1;
}
message DeleteAcheteurRequest{
  int64 ida = 1;
}
message DeleteAcheteurResponse{
  string message = 1;
}
message AcheteurRequest{
  string nom = 1;
  string ville = 2;
}
message Acheteur{
  int64 ida = 1;
  string nom = 2;
  string ville = 3;
}


